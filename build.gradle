plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.liquibase.gradle'
    id "org.springframework.cloud.contract"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencyManagement {
    imports {
        mavenBom "io.zonky.test.postgres:embedded-postgres-binaries-bom:${zonkyEmbeddedPostgresBinariesVersion}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

contracts {
    packageWithBaseClasses = 'com.example.demo'
}

contractTest {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation "org.mapstruct:mapstruct:${mapstructVerson}"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVerson}"

    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.springframework:spring-orm'
    liquibaseRuntime 'org.springframework.boot:spring-boot'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'

    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernateVersion}"

    liquibaseRuntime sourceSets.main.output

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation "org.testcontainers:postgresql:${testcontainersPostgresVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier:${springCloudContractVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:${springCloudContractVersion}"
    testImplementation "io.zonky.test:embedded-database-spring-test:${zonkyVersion}"
    testImplementation "io.zonky.test:embedded-postgres:${zonkyVersion}"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    executionData(test, contractTest)
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }

    dependsOn test  // tests are required to run before generating the report
    dependsOn contractTest
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
        }
    }
    dependsOn jacocoTestReport
}

wrapper {
    gradleVersion = "${gradleWrapperVersion}"
}

checkstyle {
    toolVersion = "${checkstyleToolVersion}"
    configDirectory = file("${rootDir}/tools/checkstyle")
    maxWarnings = 0
    checkstyleContractTest.enabled = false
    checkstyleTest.enabled = false
}

liquibase {
    activities {
        main {
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5434/testDb'
            username 'test'
            password 'test'
            changeLogFile 'src/main/resources/db/changelog/changes/XXXX-changelog.yaml'

            referenceUrl 'hibernate:spring:com.example.demo.model?' +
                    'dialect=org.hibernate.dialect.PostgreSQL10Dialect&' +
                    'hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&' +
                    'hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
            logLevel 'debug'
        }
    }
}

springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

diff.dependsOn compileJava
diffChangeLog.dependsOn compileJava
