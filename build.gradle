plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'

    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.liquibase.gradle' version '2.1.0'
    id "org.springframework.cloud.contract" version "${springCloudContractVersion}"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

contracts {
    packageWithBaseClasses = 'com.example.demo.contracts'
}

contractTest {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.9'
    liquibaseRuntime 'org.springframework:spring-orm'
    liquibaseRuntime 'org.springframework.boot:spring-boot'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'

    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.5.0'

    liquibaseRuntime sourceSets.main.output

    testImplementation 'org.testcontainers:postgresql:1.16.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier:${springCloudContractVersion}"
    testImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:${springCloudContractVersion}"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
//                minimum = 0.5
            }
        }
    }
    dependsOn jacocoTestReport
}


wrapper {
    gradleVersion = '7.3.1'
}

checkstyle {
    toolVersion = '8.37'
    configDirectory = file("${rootDir}/tools/checkstyle")
    maxWarnings = 0
    checkstyleContractTest.enabled = false
    checkstyleTest.enabled = false
}

liquibase {
    activities {
        main {
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5434/testDb'
            username 'test'
            password 'test'
            changeLogFile 'src/main/resources/db/changelog/changes/XXXX-changelog.yaml'

            referenceUrl 'hibernate:spring:com.example.demo.model?' +
                    'dialect=org.hibernate.dialect.PostgreSQL10Dialect&' +
                    'hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&' +
                    'hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
            logLevel 'debug'
        }
    }
}

springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

diff.dependsOn compileJava
diffChangeLog.dependsOn compileJava
